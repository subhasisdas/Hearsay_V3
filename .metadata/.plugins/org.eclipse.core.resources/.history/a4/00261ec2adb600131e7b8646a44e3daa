package server;
//package interfaces;

//import interfaces.ICommunicatorListener;

import interfaces.ICommunicatorListener;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.lang.Runnable;

/**
 * This is the basic communication class which is used to render to the incoming
 * browser client connections. This is a singleton class and cannot be
 * instantiated but the singleton instance can be obtained.
 * 
 * @author Subhasis Das
 * 
 */

public class Communicator extends Loggable implements Runnable
{
	private ServerSocket server=null;
	private Thread threadClient= null;
	private final int port;
	@SuppressWarnings("unused")
	private final ICommunicatorListener listener;

	//Constructor
	public Communicator(ICommunicatorListener l, int p) 
	{
		listener = l;
		port = p;
	}

	/**
	 * Run method for this thread which blocks on the accept call of the server
	 * and spawns new threads for every connection.
	 */
	@Override
	public void run() {
		try {
			while (true) {                	                	
				/**
				 * This is a blocking call which would unblock as soon as a
				 * client connects to it.
				 */

				// use loggable for this to mask output
				//sdas: done

				SetLogLevel(0);SetLinePrefix("[Communicator] :");
				log(1,this.getClass().getSimpleName()+" : accepting");

				Socket clientSocket = server.accept();
				System.out.println("Accepting...");
				System.out.println("Accepted a connection from client at port number : " + clientSocket.getPort());
				log(1,this.getClass().getSimpleName()+"accepted");

				while(true)
				{
					/*//aws@sdas : comment the code below. for aws server tcp connection test only

					BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
					PrintWriter out = new PrintWriter(clientSocket.getOutputStream(),true);
					String line = in.readLine(); 
					System.out.println(line);
					out.println("Hello Client "+ line);*/
				}
				//@aws - please uncomment listener.onConnect
				//Communication Listener
				listener.onConnect(this, clientSocket);
			}
		}
		//aws@sdas :- delete IOException after the aws test
		catch(IOException e){
			System.out.println();
			System.out.println("Read failed");
			System.exit(-1);
		}
		catch (Exception e) {
			/**
			 * Thrown when a socket.close() is called when the socket is
			 * blocked in the accept call.
			 */
			log(0, e.getMessage());
			e.printStackTrace();
			log(0,"Communicator aux thread is about stop");               
		}
	}

	/**
	 * This function starts the communicator socket if it was previously
	 * shutdown.
	 * @throws Exception 
	 */
	public synchronized void  start() throws Exception {
		if (server == null) {
			server = new ServerSocket(port);
			log(1,"creating thread");
			threadClient = new Thread(this);
			threadClient.start();
			log(1,"Communicator Socket is UP and Running!");
		} else
			log(1,"Communicator Socket is already Running!");

	}

	/**
	 * This function stops the communicator socket.
	 * @throws IOException 
	 * @throws InterruptedException 
	 */
	public synchronized void stop() throws IOException, InterruptedException 
	{
		log(1,"Communicator Stopped");
		server.close();
		server = null;
		threadClient.join();
	}


}



